Lambda calculus     in mathematical logic and computer science , lambda calculus , also Î»-calculus , is a formal system . it was designed to investigate the definition of functions , and how to apply them . it is also a tool for analysing recursion . it was introduced by alonzo church and stephen cole kleene in the 1930s . church used lambda calculus in 1936 to give a negative answer to the entscheidungsproblem . lambda calculus can be used to define what a computable function is . no general algorithm can answer the question of whether two lambda calculus expressions are equivalent . this was the first question , even before the halting problem , for which undecidability could be proved . lambda calculus has greatly influenced functional programming languages , such as lisp , ml and haskell . lambda calculus can be called the smallest universal programming language . it consists of a single transformation rule ( variable substitution ) and a single function definition scheme . lambda calculus is universal in the sense that any computable function can be expressed and evaluated using this formalism . it is thus the same as the turing machine formalism . however , lambda calculus emphasizes the use of transformation rules . it does not care about the actual machine that implements them . it is an approach more related to software than to hardware .